// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraInverseProjection;
float4x4 _CameraToWorld;

struct Ray
{
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

// TODO: start ray casting or maybe try the usual approach for calculating ray direction
// NOTE: ray has to be in relation to unity's camera
// TODO: Maybe we can try spawning orb with this technique to see in real time what it really does
Ray GetCameraRay(float2 uv)
{
    float3 origin = mul(_CameraToWorld, float4(0.0, 0.0, 0.0, 1.0)).xyz;

    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);

    float2 st = float2(id.xy / float2(width, height));
    float2 uv = st * 2.0f - 1.0f;

    Ray ray = GetCameraRay(uv);

    // Result[id.xy] = float4(uv, 0.0, 1.0);
    Result[id.xy] = float4(ray.direction, 1.0);
}
